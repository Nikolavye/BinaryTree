/*define a data structure for the node of a binary tree*/

typdef struct BINARYNODE{
    int data;//void *data
    BinaryNode *left;
    BinaryNode *right;
}BinaryNode;


/*Insert a node for the binary tree*/
//firstly check if the root node is empty or not
//if it's empty, allocate space and creat a new node as root node
//we set some conditions, the data in the left node would be greater than that of right

void CreatNode(BinaryNode **node, int value)
{
    void insert(node ** tree, int val)
    {
        node * temp = NULL;
         if(!(*tree)) {
        temp = (node *)malloc(sizeof(node));
        temp->left = temp->right = NULL;
        temp->data = val;
        *tree = temp;
        return ;
    }
    
    if (val < (*tree)->data)
    {
        insert(&(*tree)->left,val);
    }
    
    else if (val > (*tree)->data) 
    {
        insert(&(*tree)->right,val);
    }
}

void deltree(node * tree) 
{
    if(tree)
    {
        deltree(tree->left);
        deltree(tree->right);
        free(tree);
    }
}

void print_preorder(node * tree) 
{
    if(tree)
    {
        printf("%d\n",tree->data);
        print_preorder(tree->left);
        print_preorder(tree->right);
    }
}

void print_inorder(node * tree) 
{
    if(tree)
    {
        print_inorder(tree->left);
        printf("%d\n",tree->data);
        print_inorder(tree->right);
    }
}

void print_postorder(node * tree)
{
    if(tree)
    {
        print_postorder(tree->left);
        print_postorder(tree->right);
        printf("%d\n",tree->data);
    }
}


//test
int main(void)
{
    node * root;
    node * tmp;
    //int i;

    root = NULL;
    /* Inserting nodes into tree */
    insert(&root,9);
    insert(&root,4);
    insert(&root,15);
    insert(&root,6);
    insert(&root,12);
    insert(&root,17);
    insert(&root,2);

    printf("Pre Order Display\n");
    print_preorder(root);

    printf("In Order Display\n");
    print_inorder(root);

    printf("Post Order Display\n");
    print_postorder(root);


    /* Deleting all nodes of tree */
    deltree(root);
}
